/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/_dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardSearchImport } from './routes/_dashboard/search'
import { Route as DashboardDashboardImport } from './routes/_dashboard/dashboard'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardSearchRoute = DashboardSearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardDashboardRoute = DashboardDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => DashboardRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/_dashboard/dashboard': {
      id: '/_dashboard/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardDashboardImport
      parentRoute: typeof DashboardRouteImport
    }
    '/_dashboard/search': {
      id: '/_dashboard/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof DashboardSearchImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardDashboardRoute: typeof DashboardDashboardRoute
  DashboardSearchRoute: typeof DashboardSearchRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardDashboardRoute: DashboardDashboardRoute,
  DashboardSearchRoute: DashboardSearchRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof DashboardRouteRouteWithChildren
  '/dashboard': typeof DashboardDashboardRoute
  '/search': typeof DashboardSearchRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof DashboardRouteRouteWithChildren
  '/dashboard': typeof DashboardDashboardRoute
  '/search': typeof DashboardSearchRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_dashboard': typeof DashboardRouteRouteWithChildren
  '/_dashboard/dashboard': typeof DashboardDashboardRoute
  '/_dashboard/search': typeof DashboardSearchRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/dashboard' | '/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/dashboard' | '/search'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/_dashboard/dashboard'
    | '/_dashboard/search'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_dashboard": {
      "filePath": "_dashboard/route.tsx",
      "children": [
        "/_dashboard/dashboard",
        "/_dashboard/search"
      ]
    },
    "/_dashboard/dashboard": {
      "filePath": "_dashboard/dashboard.tsx",
      "parent": "/_dashboard"
    },
    "/_dashboard/search": {
      "filePath": "_dashboard/search.tsx",
      "parent": "/_dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
